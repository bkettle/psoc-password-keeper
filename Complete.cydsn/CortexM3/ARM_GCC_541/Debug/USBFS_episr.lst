ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"USBFS_episr.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.USBFS_EP_1_ISR,"ax",%progbits
  20              		.align	2
  21              		.global	USBFS_EP_1_ISR
  22              		.thumb
  23              		.thumb_func
  24              		.type	USBFS_EP_1_ISR, %function
  25              	USBFS_EP_1_ISR:
  26              	.LFB0:
  27              		.file 1 "Generated_Source\\PSoC5\\USBFS_episr.c"
   1:Generated_Source\PSoC5/USBFS_episr.c **** /***************************************************************************//**
   2:Generated_Source\PSoC5/USBFS_episr.c **** * \file USBFS_episr.c
   3:Generated_Source\PSoC5/USBFS_episr.c **** * \version 3.20
   4:Generated_Source\PSoC5/USBFS_episr.c **** *
   5:Generated_Source\PSoC5/USBFS_episr.c **** * \brief
   6:Generated_Source\PSoC5/USBFS_episr.c **** *  This file contains the Data endpoint Interrupt Service Routines.
   7:Generated_Source\PSoC5/USBFS_episr.c **** *
   8:Generated_Source\PSoC5/USBFS_episr.c **** ********************************************************************************
   9:Generated_Source\PSoC5/USBFS_episr.c **** * \copyright
  10:Generated_Source\PSoC5/USBFS_episr.c **** * Copyright 2008-2016, Cypress Semiconductor Corporation.  All rights reserved.
  11:Generated_Source\PSoC5/USBFS_episr.c **** * You may use this file only in accordance with the license, terms, conditions,
  12:Generated_Source\PSoC5/USBFS_episr.c **** * disclaimers, and limitations in the end user license agreement accompanying
  13:Generated_Source\PSoC5/USBFS_episr.c **** * the software package with which this file was provided.
  14:Generated_Source\PSoC5/USBFS_episr.c **** *******************************************************************************/
  15:Generated_Source\PSoC5/USBFS_episr.c **** 
  16:Generated_Source\PSoC5/USBFS_episr.c **** #include "USBFS_pvt.h"
  17:Generated_Source\PSoC5/USBFS_episr.c **** #include "USBFS_cydmac.h"
  18:Generated_Source\PSoC5/USBFS_episr.c **** #include "cyapicallbacks.h"
  19:Generated_Source\PSoC5/USBFS_episr.c **** 
  20:Generated_Source\PSoC5/USBFS_episr.c **** 
  21:Generated_Source\PSoC5/USBFS_episr.c **** /***************************************
  22:Generated_Source\PSoC5/USBFS_episr.c **** * Custom Declarations
  23:Generated_Source\PSoC5/USBFS_episr.c **** ***************************************/
  24:Generated_Source\PSoC5/USBFS_episr.c **** /* `#START CUSTOM_DECLARATIONS` Place your declaration here */
  25:Generated_Source\PSoC5/USBFS_episr.c **** 
  26:Generated_Source\PSoC5/USBFS_episr.c **** /* `#END` */
  27:Generated_Source\PSoC5/USBFS_episr.c **** 
  28:Generated_Source\PSoC5/USBFS_episr.c **** 
  29:Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_EP1_ISR_ACTIVE)
  30:Generated_Source\PSoC5/USBFS_episr.c ****     /******************************************************************************
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 2


  31:Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_EP_1_ISR
  32:Generated_Source\PSoC5/USBFS_episr.c ****     ***************************************************************************//**
  33:Generated_Source\PSoC5/USBFS_episr.c ****     *
  34:Generated_Source\PSoC5/USBFS_episr.c ****     *  Endpoint 1 Interrupt Service Routine
  35:Generated_Source\PSoC5/USBFS_episr.c ****     *
  36:Generated_Source\PSoC5/USBFS_episr.c ****     ******************************************************************************/
  37:Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_EP_1_ISR)
  38:Generated_Source\PSoC5/USBFS_episr.c ****     {
  28              		.loc 1 38 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  39:Generated_Source\PSoC5/USBFS_episr.c **** 
  40:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_1_ISR_ENTRY_CALLBACK
  41:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_1_ISR_EntryCallback();
  42:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_1_ISR_ENTRY_CALLBACK) */
  43:Generated_Source\PSoC5/USBFS_episr.c **** 
  44:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP1_USER_CODE` Place your code here */
  45:Generated_Source\PSoC5/USBFS_episr.c **** 
  46:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
  47:Generated_Source\PSoC5/USBFS_episr.c **** 
  48:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
  49:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
  50:Generated_Source\PSoC5/USBFS_episr.c ****         {
  51:Generated_Source\PSoC5/USBFS_episr.c ****             uint8 intEn = EA;
  52:Generated_Source\PSoC5/USBFS_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
  53:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
  54:Generated_Source\PSoC5/USBFS_episr.c ****     
  55:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieEpInterruptSource(USBFS_SIE_INT_EP1_INTR);
  33              		.loc 1 55 0
  34 0000 0122     		movs	r2, #1
  35 0002 094B     		ldr	r3, .L3
  36 0004 1A70     		strb	r2, [r3]
  56:Generated_Source\PSoC5/USBFS_episr.c ****             
  57:Generated_Source\PSoC5/USBFS_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
  58:Generated_Source\PSoC5/USBFS_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
  59:Generated_Source\PSoC5/USBFS_episr.c ****         * OUT endpoint: data is ready to be read from endpoint buffer. 
  60:Generated_Source\PSoC5/USBFS_episr.c ****         */
  61:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)
  62:Generated_Source\PSoC5/USBFS_episr.c ****         if (0u != (USBFS_EP[USBFS_EP1].addr & USBFS_DIR_IN))
  63:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO) */
  64:Generated_Source\PSoC5/USBFS_episr.c ****         {
  65:Generated_Source\PSoC5/USBFS_episr.c ****             /* Read CR0 register to clear SIE lock. */
  66:Generated_Source\PSoC5/USBFS_episr.c ****             (void) USBFS_SIE_EP_BASE.sieEp[USBFS_EP1].epCr0;
  37              		.loc 1 66 0
  38 0006 0F3B     		subs	r3, r3, #15
  39 0008 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
  67:Generated_Source\PSoC5/USBFS_episr.c ****             
  68:Generated_Source\PSoC5/USBFS_episr.c ****             /* Toggle all endpoint types except ISOC. */
  69:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_GET_EP_TYPE(USBFS_EP1) != USBFS_EP_TYPE_ISOC)
  40              		.loc 1 69 0
  41 000a 084B     		ldr	r3, .L3+4
  42 000c 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
  43 000e 03F00303 		and	r3, r3, #3
  44 0012 9342     		cmp	r3, r2
  45 0014 04D0     		beq	.L2
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 3


  70:Generated_Source\PSoC5/USBFS_episr.c ****             {
  71:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_EP[USBFS_EP1].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
  46              		.loc 1 71 0
  47 0016 054A     		ldr	r2, .L3+4
  48 0018 D37B     		ldrb	r3, [r2, #15]	@ zero_extendqisi2
  49 001a 83F08003 		eor	r3, r3, #128
  50 001e D373     		strb	r3, [r2, #15]
  51              	.L2:
  72:Generated_Source\PSoC5/USBFS_episr.c ****             }
  73:Generated_Source\PSoC5/USBFS_episr.c **** 
  74:Generated_Source\PSoC5/USBFS_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
  75:Generated_Source\PSoC5/USBFS_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
  76:Generated_Source\PSoC5/USBFS_episr.c ****             * Because last chunk of data is being copied.
  77:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
  78:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
  79:Generated_Source\PSoC5/USBFS_episr.c ****             */
  80:Generated_Source\PSoC5/USBFS_episr.c ****             USBFS_EP[USBFS_EP1].apiEpState = USBFS_EVENT_PENDING;
  52              		.loc 1 80 0
  53 0020 0122     		movs	r2, #1
  54 0022 024B     		ldr	r3, .L3+4
  55 0024 5A73     		strb	r2, [r3, #13]
  56 0026 7047     		bx	lr
  57              	.L4:
  58              		.align	2
  59              	.L3:
  60 0028 0B600040 		.word	1073766411
  61 002c 00000000 		.word	USBFS_EP
  62              		.cfi_endproc
  63              	.LFE0:
  64              		.size	USBFS_EP_1_ISR, .-USBFS_EP_1_ISR
  65              		.section	.text.USBFS_EP_2_ISR,"ax",%progbits
  66              		.align	2
  67              		.global	USBFS_EP_2_ISR
  68              		.thumb
  69              		.thumb_func
  70              		.type	USBFS_EP_2_ISR, %function
  71              	USBFS_EP_2_ISR:
  72              	.LFB1:
  81:Generated_Source\PSoC5/USBFS_episr.c ****         }
  82:Generated_Source\PSoC5/USBFS_episr.c **** 
  83:Generated_Source\PSoC5/USBFS_episr.c ****     #if (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO))
  84:Generated_Source\PSoC5/USBFS_episr.c ****         #if (defined(USBFS_ENABLE_MIDI_STREAMING) && \
  85:Generated_Source\PSoC5/USBFS_episr.c ****             !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
  86:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_midi_out_ep == USBFS_EP1)
  87:Generated_Source\PSoC5/USBFS_episr.c ****             {
  88:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_MIDI_OUT_Service();
  89:Generated_Source\PSoC5/USBFS_episr.c ****             }
  90:Generated_Source\PSoC5/USBFS_episr.c ****         #endif /* (USBFS_ISR_SERVICE_MIDI_OUT) */
  91:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)) */
  92:Generated_Source\PSoC5/USBFS_episr.c ****     
  93:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP1_END_USER_CODE` Place your code here */
  94:Generated_Source\PSoC5/USBFS_episr.c **** 
  95:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
  96:Generated_Source\PSoC5/USBFS_episr.c **** 
  97:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_1_ISR_EXIT_CALLBACK
  98:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_1_ISR_ExitCallback();
  99:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_1_ISR_EXIT_CALLBACK) */
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 4


 100:Generated_Source\PSoC5/USBFS_episr.c **** 
 101:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 102:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 103:Generated_Source\PSoC5/USBFS_episr.c ****         
 104:Generated_Source\PSoC5/USBFS_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 105:Generated_Source\PSoC5/USBFS_episr.c ****         }
 106:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 107:Generated_Source\PSoC5/USBFS_episr.c ****     }
 108:Generated_Source\PSoC5/USBFS_episr.c **** 
 109:Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_EP1_ISR_ACTIVE) */
 110:Generated_Source\PSoC5/USBFS_episr.c **** 
 111:Generated_Source\PSoC5/USBFS_episr.c **** 
 112:Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_EP2_ISR_ACTIVE)
 113:Generated_Source\PSoC5/USBFS_episr.c ****     /*******************************************************************************
 114:Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_EP_2_ISR
 115:Generated_Source\PSoC5/USBFS_episr.c ****     ****************************************************************************//**
 116:Generated_Source\PSoC5/USBFS_episr.c ****     *
 117:Generated_Source\PSoC5/USBFS_episr.c ****     *  Endpoint 2 Interrupt Service Routine.
 118:Generated_Source\PSoC5/USBFS_episr.c ****     *
 119:Generated_Source\PSoC5/USBFS_episr.c ****     *******************************************************************************/
 120:Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_EP_2_ISR)
 121:Generated_Source\PSoC5/USBFS_episr.c ****     {
  73              		.loc 1 121 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              		@ link register save eliminated.
 122:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_2_ISR_ENTRY_CALLBACK
 123:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_2_ISR_EntryCallback();
 124:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_2_ISR_ENTRY_CALLBACK) */
 125:Generated_Source\PSoC5/USBFS_episr.c **** 
 126:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP2_USER_CODE` Place your code here */
 127:Generated_Source\PSoC5/USBFS_episr.c **** 
 128:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 129:Generated_Source\PSoC5/USBFS_episr.c **** 
 130:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 131:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 132:Generated_Source\PSoC5/USBFS_episr.c ****         {
 133:Generated_Source\PSoC5/USBFS_episr.c ****             uint8 intEn = EA;
 134:Generated_Source\PSoC5/USBFS_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 135:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 136:Generated_Source\PSoC5/USBFS_episr.c **** 
 137:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieEpInterruptSource(USBFS_SIE_INT_EP2_INTR);
  78              		.loc 1 137 0
  79 0000 0222     		movs	r2, #2
  80 0002 0A4B     		ldr	r3, .L7
  81 0004 1A70     		strb	r2, [r3]
 138:Generated_Source\PSoC5/USBFS_episr.c **** 
 139:Generated_Source\PSoC5/USBFS_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 140:Generated_Source\PSoC5/USBFS_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 141:Generated_Source\PSoC5/USBFS_episr.c ****         * OUT endpoint: data is ready to be read from endpoint buffer. 
 142:Generated_Source\PSoC5/USBFS_episr.c ****         */
 143:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)
 144:Generated_Source\PSoC5/USBFS_episr.c ****         if (0u != (USBFS_EP[USBFS_EP2].addr & USBFS_DIR_IN))
 145:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO) */
 146:Generated_Source\PSoC5/USBFS_episr.c ****         {            
 147:Generated_Source\PSoC5/USBFS_episr.c ****             /* Read CR0 register to clear SIE lock. */
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 5


 148:Generated_Source\PSoC5/USBFS_episr.c ****             (void) USBFS_SIE_EP_BASE.sieEp[USBFS_EP2].epCr0;
  82              		.loc 1 148 0
  83 0006 0F3B     		subs	r3, r3, #15
  84 0008 93F82230 		ldrb	r3, [r3, #34]	@ zero_extendqisi2
 149:Generated_Source\PSoC5/USBFS_episr.c ****             
 150:Generated_Source\PSoC5/USBFS_episr.c ****             /* Toggle all endpoint types except ISOC. */
 151:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_GET_EP_TYPE(USBFS_EP2) != USBFS_EP_TYPE_ISOC)
  85              		.loc 1 151 0
  86 000c 084B     		ldr	r3, .L7+4
  87 000e 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
  88 0010 03F00303 		and	r3, r3, #3
  89 0014 012B     		cmp	r3, #1
  90 0016 04D0     		beq	.L6
 152:Generated_Source\PSoC5/USBFS_episr.c ****             {
 153:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_EP[USBFS_EP2].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
  91              		.loc 1 153 0
  92 0018 054A     		ldr	r2, .L7+4
  93 001a D37E     		ldrb	r3, [r2, #27]	@ zero_extendqisi2
  94 001c 83F08003 		eor	r3, r3, #128
  95 0020 D376     		strb	r3, [r2, #27]
  96              	.L6:
 154:Generated_Source\PSoC5/USBFS_episr.c ****             }
 155:Generated_Source\PSoC5/USBFS_episr.c **** 
 156:Generated_Source\PSoC5/USBFS_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 157:Generated_Source\PSoC5/USBFS_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 158:Generated_Source\PSoC5/USBFS_episr.c ****             * Because last chunk of data is being copied.
 159:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 160:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 161:Generated_Source\PSoC5/USBFS_episr.c ****             */
 162:Generated_Source\PSoC5/USBFS_episr.c ****             USBFS_EP[USBFS_EP2].apiEpState = USBFS_EVENT_PENDING;
  97              		.loc 1 162 0
  98 0022 0122     		movs	r2, #1
  99 0024 024B     		ldr	r3, .L7+4
 100 0026 5A76     		strb	r2, [r3, #25]
 101 0028 7047     		bx	lr
 102              	.L8:
 103 002a 00BF     		.align	2
 104              	.L7:
 105 002c 0B600040 		.word	1073766411
 106 0030 00000000 		.word	USBFS_EP
 107              		.cfi_endproc
 108              	.LFE1:
 109              		.size	USBFS_EP_2_ISR, .-USBFS_EP_2_ISR
 110              		.section	.text.USBFS_EP_3_ISR,"ax",%progbits
 111              		.align	2
 112              		.global	USBFS_EP_3_ISR
 113              		.thumb
 114              		.thumb_func
 115              		.type	USBFS_EP_3_ISR, %function
 116              	USBFS_EP_3_ISR:
 117              	.LFB2:
 163:Generated_Source\PSoC5/USBFS_episr.c ****         }
 164:Generated_Source\PSoC5/USBFS_episr.c **** 
 165:Generated_Source\PSoC5/USBFS_episr.c ****     #if (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO))
 166:Generated_Source\PSoC5/USBFS_episr.c ****         #if (defined(USBFS_ENABLE_MIDI_STREAMING) && \
 167:Generated_Source\PSoC5/USBFS_episr.c ****             !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 168:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_midi_out_ep == USBFS_EP2)
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 6


 169:Generated_Source\PSoC5/USBFS_episr.c ****             {
 170:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_MIDI_OUT_Service();
 171:Generated_Source\PSoC5/USBFS_episr.c ****             }
 172:Generated_Source\PSoC5/USBFS_episr.c ****         #endif /* (USBFS_ISR_SERVICE_MIDI_OUT) */
 173:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)) */        
 174:Generated_Source\PSoC5/USBFS_episr.c ****     
 175:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP2_END_USER_CODE` Place your code here */
 176:Generated_Source\PSoC5/USBFS_episr.c **** 
 177:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 178:Generated_Source\PSoC5/USBFS_episr.c **** 
 179:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_2_ISR_EXIT_CALLBACK
 180:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_2_ISR_ExitCallback();
 181:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_2_ISR_EXIT_CALLBACK) */
 182:Generated_Source\PSoC5/USBFS_episr.c **** 
 183:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 184:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 185:Generated_Source\PSoC5/USBFS_episr.c ****         
 186:Generated_Source\PSoC5/USBFS_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 187:Generated_Source\PSoC5/USBFS_episr.c ****         }
 188:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 189:Generated_Source\PSoC5/USBFS_episr.c ****     }
 190:Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_EP2_ISR_ACTIVE) */
 191:Generated_Source\PSoC5/USBFS_episr.c **** 
 192:Generated_Source\PSoC5/USBFS_episr.c **** 
 193:Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_EP3_ISR_ACTIVE)
 194:Generated_Source\PSoC5/USBFS_episr.c ****     /*******************************************************************************
 195:Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_EP_3_ISR
 196:Generated_Source\PSoC5/USBFS_episr.c ****     ****************************************************************************//**
 197:Generated_Source\PSoC5/USBFS_episr.c ****     *
 198:Generated_Source\PSoC5/USBFS_episr.c ****     *  Endpoint 3 Interrupt Service Routine.
 199:Generated_Source\PSoC5/USBFS_episr.c ****     *
 200:Generated_Source\PSoC5/USBFS_episr.c ****     *******************************************************************************/
 201:Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_EP_3_ISR)
 202:Generated_Source\PSoC5/USBFS_episr.c ****     {
 118              		.loc 1 202 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 0, uses_anonymous_args = 0
 122              		@ link register save eliminated.
 203:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_3_ISR_ENTRY_CALLBACK
 204:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_3_ISR_EntryCallback();
 205:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_3_ISR_ENTRY_CALLBACK) */
 206:Generated_Source\PSoC5/USBFS_episr.c **** 
 207:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP3_USER_CODE` Place your code here */
 208:Generated_Source\PSoC5/USBFS_episr.c **** 
 209:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 210:Generated_Source\PSoC5/USBFS_episr.c **** 
 211:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 212:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 213:Generated_Source\PSoC5/USBFS_episr.c ****         {
 214:Generated_Source\PSoC5/USBFS_episr.c ****             uint8 intEn = EA;
 215:Generated_Source\PSoC5/USBFS_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 216:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 217:Generated_Source\PSoC5/USBFS_episr.c **** 
 218:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieEpInterruptSource(USBFS_SIE_INT_EP3_INTR);    
 123              		.loc 1 218 0
 124 0000 0422     		movs	r2, #4
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 7


 125 0002 0C4B     		ldr	r3, .L11
 126 0004 1A70     		strb	r2, [r3]
 219:Generated_Source\PSoC5/USBFS_episr.c **** 
 220:Generated_Source\PSoC5/USBFS_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 221:Generated_Source\PSoC5/USBFS_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 222:Generated_Source\PSoC5/USBFS_episr.c ****         * OUT endpoint: data is ready to be read from endpoint buffer. 
 223:Generated_Source\PSoC5/USBFS_episr.c ****         */
 224:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)
 225:Generated_Source\PSoC5/USBFS_episr.c ****         if (0u != (USBFS_EP[USBFS_EP3].addr & USBFS_DIR_IN))
 226:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_MANAGEMENT_DMA_AUTO) */
 227:Generated_Source\PSoC5/USBFS_episr.c ****         {            
 228:Generated_Source\PSoC5/USBFS_episr.c ****             /* Read CR0 register to clear SIE lock. */
 229:Generated_Source\PSoC5/USBFS_episr.c ****             (void) USBFS_SIE_EP_BASE.sieEp[USBFS_EP3].epCr0;
 127              		.loc 1 229 0
 128 0006 0F3B     		subs	r3, r3, #15
 129 0008 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 230:Generated_Source\PSoC5/USBFS_episr.c **** 
 231:Generated_Source\PSoC5/USBFS_episr.c ****             /* Toggle all endpoint types except ISOC. */
 232:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_GET_EP_TYPE(USBFS_EP3) != USBFS_EP_TYPE_ISOC)
 130              		.loc 1 232 0
 131 000c 0A4B     		ldr	r3, .L11+4
 132 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 133 0012 03F00303 		and	r3, r3, #3
 134 0016 012B     		cmp	r3, #1
 135 0018 06D0     		beq	.L10
 233:Generated_Source\PSoC5/USBFS_episr.c ****             {
 234:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_EP[USBFS_EP3].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
 136              		.loc 1 234 0
 137 001a 074A     		ldr	r2, .L11+4
 138 001c 92F82730 		ldrb	r3, [r2, #39]	@ zero_extendqisi2
 139 0020 83F08003 		eor	r3, r3, #128
 140 0024 82F82730 		strb	r3, [r2, #39]
 141              	.L10:
 235:Generated_Source\PSoC5/USBFS_episr.c ****             }
 236:Generated_Source\PSoC5/USBFS_episr.c **** 
 237:Generated_Source\PSoC5/USBFS_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 238:Generated_Source\PSoC5/USBFS_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 239:Generated_Source\PSoC5/USBFS_episr.c ****             * Because last chunk of data is being copied.
 240:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 241:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 242:Generated_Source\PSoC5/USBFS_episr.c ****             */
 243:Generated_Source\PSoC5/USBFS_episr.c ****             USBFS_EP[USBFS_EP3].apiEpState = USBFS_EVENT_PENDING;
 142              		.loc 1 243 0
 143 0028 0122     		movs	r2, #1
 144 002a 034B     		ldr	r3, .L11+4
 145 002c 83F82520 		strb	r2, [r3, #37]
 146 0030 7047     		bx	lr
 147              	.L12:
 148 0032 00BF     		.align	2
 149              	.L11:
 150 0034 0B600040 		.word	1073766411
 151 0038 00000000 		.word	USBFS_EP
 152              		.cfi_endproc
 153              	.LFE2:
 154              		.size	USBFS_EP_3_ISR, .-USBFS_EP_3_ISR
 155              		.section	.text.USBFS_EP_4_ISR,"ax",%progbits
 156              		.align	2
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 8


 157              		.global	USBFS_EP_4_ISR
 158              		.thumb
 159              		.thumb_func
 160              		.type	USBFS_EP_4_ISR, %function
 161              	USBFS_EP_4_ISR:
 162              	.LFB3:
 244:Generated_Source\PSoC5/USBFS_episr.c ****         }
 245:Generated_Source\PSoC5/USBFS_episr.c **** 
 246:Generated_Source\PSoC5/USBFS_episr.c ****     #if (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO))
 247:Generated_Source\PSoC5/USBFS_episr.c ****         #if (defined(USBFS_ENABLE_MIDI_STREAMING) && \
 248:Generated_Source\PSoC5/USBFS_episr.c ****             !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 249:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_midi_out_ep == USBFS_EP3)
 250:Generated_Source\PSoC5/USBFS_episr.c ****             {
 251:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_MIDI_OUT_Service();
 252:Generated_Source\PSoC5/USBFS_episr.c ****             }
 253:Generated_Source\PSoC5/USBFS_episr.c ****         #endif /* (USBFS_ISR_SERVICE_MIDI_OUT) */
 254:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)) */        
 255:Generated_Source\PSoC5/USBFS_episr.c **** 
 256:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP3_END_USER_CODE` Place your code here */
 257:Generated_Source\PSoC5/USBFS_episr.c **** 
 258:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 259:Generated_Source\PSoC5/USBFS_episr.c **** 
 260:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_3_ISR_EXIT_CALLBACK
 261:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_3_ISR_ExitCallback();
 262:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_3_ISR_EXIT_CALLBACK) */
 263:Generated_Source\PSoC5/USBFS_episr.c **** 
 264:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 265:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 266:Generated_Source\PSoC5/USBFS_episr.c ****         
 267:Generated_Source\PSoC5/USBFS_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 268:Generated_Source\PSoC5/USBFS_episr.c ****         }
 269:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 270:Generated_Source\PSoC5/USBFS_episr.c ****     }
 271:Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_EP3_ISR_ACTIVE) */
 272:Generated_Source\PSoC5/USBFS_episr.c **** 
 273:Generated_Source\PSoC5/USBFS_episr.c **** 
 274:Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_EP4_ISR_ACTIVE)
 275:Generated_Source\PSoC5/USBFS_episr.c ****     /*******************************************************************************
 276:Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_EP_4_ISR
 277:Generated_Source\PSoC5/USBFS_episr.c ****     ****************************************************************************//**
 278:Generated_Source\PSoC5/USBFS_episr.c ****     *
 279:Generated_Source\PSoC5/USBFS_episr.c ****     *  Endpoint 4 Interrupt Service Routine.
 280:Generated_Source\PSoC5/USBFS_episr.c ****     *
 281:Generated_Source\PSoC5/USBFS_episr.c ****     *******************************************************************************/
 282:Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_EP_4_ISR)
 283:Generated_Source\PSoC5/USBFS_episr.c ****     {
 163              		.loc 1 283 0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 284:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_4_ISR_ENTRY_CALLBACK
 285:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_4_ISR_EntryCallback();
 286:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_4_ISR_ENTRY_CALLBACK) */
 287:Generated_Source\PSoC5/USBFS_episr.c **** 
 288:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP4_USER_CODE` Place your code here */
 289:Generated_Source\PSoC5/USBFS_episr.c **** 
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 9


 290:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 291:Generated_Source\PSoC5/USBFS_episr.c **** 
 292:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 293:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 294:Generated_Source\PSoC5/USBFS_episr.c ****         {
 295:Generated_Source\PSoC5/USBFS_episr.c ****             uint8 intEn = EA;
 296:Generated_Source\PSoC5/USBFS_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 297:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 298:Generated_Source\PSoC5/USBFS_episr.c **** 
 299:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieEpInterruptSource(USBFS_SIE_INT_EP4_INTR);
 168              		.loc 1 299 0
 169 0000 0822     		movs	r2, #8
 170 0002 0C4B     		ldr	r3, .L15
 171 0004 1A70     		strb	r2, [r3]
 300:Generated_Source\PSoC5/USBFS_episr.c ****         
 301:Generated_Source\PSoC5/USBFS_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 302:Generated_Source\PSoC5/USBFS_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 303:Generated_Source\PSoC5/USBFS_episr.c ****         * OUT endpoint: data is ready to read from endpoint buffer. 
 304:Generated_Source\PSoC5/USBFS_episr.c ****         */
 305:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)
 306:Generated_Source\PSoC5/USBFS_episr.c ****         if (0u != (USBFS_EP[USBFS_EP4].addr & USBFS_DIR_IN))
 307:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_MANAGEMENT_DMA_AUTO) */
 308:Generated_Source\PSoC5/USBFS_episr.c ****         {
 309:Generated_Source\PSoC5/USBFS_episr.c ****             /* Read CR0 register to clear SIE lock. */
 310:Generated_Source\PSoC5/USBFS_episr.c ****             (void) USBFS_SIE_EP_BASE.sieEp[USBFS_EP4].epCr0;
 172              		.loc 1 310 0
 173 0006 0F3B     		subs	r3, r3, #15
 174 0008 93F84230 		ldrb	r3, [r3, #66]	@ zero_extendqisi2
 311:Generated_Source\PSoC5/USBFS_episr.c **** 
 312:Generated_Source\PSoC5/USBFS_episr.c ****             /* Toggle all endpoint types except ISOC. */
 313:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_GET_EP_TYPE(USBFS_EP4) != USBFS_EP_TYPE_ISOC)
 175              		.loc 1 313 0
 176 000c 0A4B     		ldr	r3, .L15+4
 177 000e 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 178 0012 03F00303 		and	r3, r3, #3
 179 0016 012B     		cmp	r3, #1
 180 0018 06D0     		beq	.L14
 314:Generated_Source\PSoC5/USBFS_episr.c ****             {
 315:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_EP[USBFS_EP4].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
 181              		.loc 1 315 0
 182 001a 074A     		ldr	r2, .L15+4
 183 001c 92F83330 		ldrb	r3, [r2, #51]	@ zero_extendqisi2
 184 0020 83F08003 		eor	r3, r3, #128
 185 0024 82F83330 		strb	r3, [r2, #51]
 186              	.L14:
 316:Generated_Source\PSoC5/USBFS_episr.c ****             }
 317:Generated_Source\PSoC5/USBFS_episr.c **** 
 318:Generated_Source\PSoC5/USBFS_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 319:Generated_Source\PSoC5/USBFS_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 320:Generated_Source\PSoC5/USBFS_episr.c ****             * Because last chunk of data is being copied.
 321:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 322:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 323:Generated_Source\PSoC5/USBFS_episr.c ****             */
 324:Generated_Source\PSoC5/USBFS_episr.c ****             USBFS_EP[USBFS_EP4].apiEpState = USBFS_EVENT_PENDING;
 187              		.loc 1 324 0
 188 0028 0122     		movs	r2, #1
 189 002a 034B     		ldr	r3, .L15+4
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 10


 190 002c 83F83120 		strb	r2, [r3, #49]
 191 0030 7047     		bx	lr
 192              	.L16:
 193 0032 00BF     		.align	2
 194              	.L15:
 195 0034 0B600040 		.word	1073766411
 196 0038 00000000 		.word	USBFS_EP
 197              		.cfi_endproc
 198              	.LFE3:
 199              		.size	USBFS_EP_4_ISR, .-USBFS_EP_4_ISR
 200              		.section	.text.USBFS_EP_5_ISR,"ax",%progbits
 201              		.align	2
 202              		.global	USBFS_EP_5_ISR
 203              		.thumb
 204              		.thumb_func
 205              		.type	USBFS_EP_5_ISR, %function
 206              	USBFS_EP_5_ISR:
 207              	.LFB4:
 325:Generated_Source\PSoC5/USBFS_episr.c ****         }
 326:Generated_Source\PSoC5/USBFS_episr.c **** 
 327:Generated_Source\PSoC5/USBFS_episr.c ****     #if (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO))
 328:Generated_Source\PSoC5/USBFS_episr.c ****         #if (defined(USBFS_ENABLE_MIDI_STREAMING) && \
 329:Generated_Source\PSoC5/USBFS_episr.c ****             !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 330:Generated_Source\PSoC5/USBFS_episr.c ****             if(USBFS_midi_out_ep == USBFS_EP4)
 331:Generated_Source\PSoC5/USBFS_episr.c ****             {
 332:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_MIDI_OUT_Service();
 333:Generated_Source\PSoC5/USBFS_episr.c ****             }
 334:Generated_Source\PSoC5/USBFS_episr.c ****         #endif /* (USBFS_ISR_SERVICE_MIDI_OUT) */
 335:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)) */        
 336:Generated_Source\PSoC5/USBFS_episr.c **** 
 337:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP4_END_USER_CODE` Place your code here */
 338:Generated_Source\PSoC5/USBFS_episr.c **** 
 339:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 340:Generated_Source\PSoC5/USBFS_episr.c **** 
 341:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_4_ISR_EXIT_CALLBACK
 342:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_4_ISR_ExitCallback();
 343:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_4_ISR_EXIT_CALLBACK) */
 344:Generated_Source\PSoC5/USBFS_episr.c **** 
 345:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 346:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 347:Generated_Source\PSoC5/USBFS_episr.c ****         
 348:Generated_Source\PSoC5/USBFS_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 349:Generated_Source\PSoC5/USBFS_episr.c ****         }
 350:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 351:Generated_Source\PSoC5/USBFS_episr.c ****     }
 352:Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_EP4_ISR_ACTIVE) */
 353:Generated_Source\PSoC5/USBFS_episr.c **** 
 354:Generated_Source\PSoC5/USBFS_episr.c **** 
 355:Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_EP5_ISR_ACTIVE)
 356:Generated_Source\PSoC5/USBFS_episr.c ****     /*******************************************************************************
 357:Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_EP_5_ISR
 358:Generated_Source\PSoC5/USBFS_episr.c ****     ****************************************************************************//**
 359:Generated_Source\PSoC5/USBFS_episr.c ****     *
 360:Generated_Source\PSoC5/USBFS_episr.c ****     *  Endpoint 5 Interrupt Service Routine
 361:Generated_Source\PSoC5/USBFS_episr.c ****     *
 362:Generated_Source\PSoC5/USBFS_episr.c ****     *
 363:Generated_Source\PSoC5/USBFS_episr.c ****     *******************************************************************************/
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 11


 364:Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_EP_5_ISR)
 365:Generated_Source\PSoC5/USBFS_episr.c ****     {
 208              		.loc 1 365 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212              		@ link register save eliminated.
 366:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_5_ISR_ENTRY_CALLBACK
 367:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_5_ISR_EntryCallback();
 368:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_5_ISR_ENTRY_CALLBACK) */
 369:Generated_Source\PSoC5/USBFS_episr.c **** 
 370:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP5_USER_CODE` Place your code here */
 371:Generated_Source\PSoC5/USBFS_episr.c **** 
 372:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 373:Generated_Source\PSoC5/USBFS_episr.c **** 
 374:Generated_Source\PSoC5/USBFS_episr.c ****     #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
 375:Generated_Source\PSoC5/USBFS_episr.c ****                  USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
 376:Generated_Source\PSoC5/USBFS_episr.c ****         {
 377:Generated_Source\PSoC5/USBFS_episr.c ****             uint8 intEn = EA;
 378:Generated_Source\PSoC5/USBFS_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 379:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 380:Generated_Source\PSoC5/USBFS_episr.c **** 
 381:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieEpInterruptSource(USBFS_SIE_INT_EP5_INTR);
 213              		.loc 1 381 0
 214 0000 1022     		movs	r2, #16
 215 0002 0C4B     		ldr	r3, .L19
 216 0004 1A70     		strb	r2, [r3]
 382:Generated_Source\PSoC5/USBFS_episr.c ****     
 383:Generated_Source\PSoC5/USBFS_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 384:Generated_Source\PSoC5/USBFS_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 385:Generated_Source\PSoC5/USBFS_episr.c ****         * OUT endpoint: data is ready to read from endpoint buffer. 
 386:Generated_Source\PSoC5/USBFS_episr.c ****         */
 387:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)
 388:Generated_Source\PSoC5/USBFS_episr.c ****         if (0u != (USBFS_EP[USBFS_EP5].addr & USBFS_DIR_IN))
 389:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_MANAGEMENT_DMA_AUTO) */
 390:Generated_Source\PSoC5/USBFS_episr.c ****         {            
 391:Generated_Source\PSoC5/USBFS_episr.c ****             /* Read CR0 register to clear SIE lock. */
 392:Generated_Source\PSoC5/USBFS_episr.c ****             (void) USBFS_SIE_EP_BASE.sieEp[USBFS_EP5].epCr0;
 217              		.loc 1 392 0
 218 0006 0F3B     		subs	r3, r3, #15
 219 0008 93F85230 		ldrb	r3, [r3, #82]	@ zero_extendqisi2
 393:Generated_Source\PSoC5/USBFS_episr.c **** 
 394:Generated_Source\PSoC5/USBFS_episr.c ****             /* Toggle all endpoint types except ISOC. */
 395:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_GET_EP_TYPE(USBFS_EP5) != USBFS_EP_TYPE_ISOC)
 220              		.loc 1 395 0
 221 000c 0A4B     		ldr	r3, .L19+4
 222 000e 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 223 0012 03F00303 		and	r3, r3, #3
 224 0016 012B     		cmp	r3, #1
 225 0018 06D0     		beq	.L18
 396:Generated_Source\PSoC5/USBFS_episr.c ****             {
 397:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_EP[USBFS_EP5].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
 226              		.loc 1 397 0
 227 001a 074A     		ldr	r2, .L19+4
 228 001c 92F83F30 		ldrb	r3, [r2, #63]	@ zero_extendqisi2
 229 0020 83F08003 		eor	r3, r3, #128
 230 0024 82F83F30 		strb	r3, [r2, #63]
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 12


 231              	.L18:
 398:Generated_Source\PSoC5/USBFS_episr.c ****             }
 399:Generated_Source\PSoC5/USBFS_episr.c **** 
 400:Generated_Source\PSoC5/USBFS_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 401:Generated_Source\PSoC5/USBFS_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 402:Generated_Source\PSoC5/USBFS_episr.c ****             * Because last chunk of data is being copied.
 403:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 404:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 405:Generated_Source\PSoC5/USBFS_episr.c ****             */
 406:Generated_Source\PSoC5/USBFS_episr.c ****             USBFS_EP[USBFS_EP5].apiEpState = USBFS_EVENT_PENDING;
 232              		.loc 1 406 0
 233 0028 0122     		movs	r2, #1
 234 002a 034B     		ldr	r3, .L19+4
 235 002c 83F83D20 		strb	r2, [r3, #61]
 236 0030 7047     		bx	lr
 237              	.L20:
 238 0032 00BF     		.align	2
 239              	.L19:
 240 0034 0B600040 		.word	1073766411
 241 0038 00000000 		.word	USBFS_EP
 242              		.cfi_endproc
 243              	.LFE4:
 244              		.size	USBFS_EP_5_ISR, .-USBFS_EP_5_ISR
 245              		.section	.text.USBFS_SOF_ISR,"ax",%progbits
 246              		.align	2
 247              		.global	USBFS_SOF_ISR
 248              		.thumb
 249              		.thumb_func
 250              		.type	USBFS_SOF_ISR, %function
 251              	USBFS_SOF_ISR:
 252              	.LFB5:
 407:Generated_Source\PSoC5/USBFS_episr.c ****         }
 408:Generated_Source\PSoC5/USBFS_episr.c **** 
 409:Generated_Source\PSoC5/USBFS_episr.c ****     #if (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO))        
 410:Generated_Source\PSoC5/USBFS_episr.c ****         #if (defined(USBFS_ENABLE_MIDI_STREAMING) && \
 411:Generated_Source\PSoC5/USBFS_episr.c ****             !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 412:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_midi_out_ep == USBFS_EP5)
 413:Generated_Source\PSoC5/USBFS_episr.c ****             {
 414:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_MIDI_OUT_Service();
 415:Generated_Source\PSoC5/USBFS_episr.c ****             }
 416:Generated_Source\PSoC5/USBFS_episr.c ****         #endif /* (USBFS_ISR_SERVICE_MIDI_OUT) */
 417:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)) */
 418:Generated_Source\PSoC5/USBFS_episr.c **** 
 419:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP5_END_USER_CODE` Place your code here */
 420:Generated_Source\PSoC5/USBFS_episr.c **** 
 421:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 422:Generated_Source\PSoC5/USBFS_episr.c **** 
 423:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_5_ISR_EXIT_CALLBACK
 424:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_5_ISR_ExitCallback();
 425:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_5_ISR_EXIT_CALLBACK) */
 426:Generated_Source\PSoC5/USBFS_episr.c **** 
 427:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 428:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 429:Generated_Source\PSoC5/USBFS_episr.c ****         
 430:Generated_Source\PSoC5/USBFS_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 431:Generated_Source\PSoC5/USBFS_episr.c ****         }
 432:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 13


 433:Generated_Source\PSoC5/USBFS_episr.c ****     }
 434:Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_EP5_ISR_ACTIVE) */
 435:Generated_Source\PSoC5/USBFS_episr.c **** 
 436:Generated_Source\PSoC5/USBFS_episr.c **** 
 437:Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_EP6_ISR_ACTIVE)
 438:Generated_Source\PSoC5/USBFS_episr.c ****     /*******************************************************************************
 439:Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_EP_6_ISR
 440:Generated_Source\PSoC5/USBFS_episr.c ****     ****************************************************************************//**
 441:Generated_Source\PSoC5/USBFS_episr.c ****     *
 442:Generated_Source\PSoC5/USBFS_episr.c ****     *  Endpoint 6 Interrupt Service Routine.
 443:Generated_Source\PSoC5/USBFS_episr.c ****     *
 444:Generated_Source\PSoC5/USBFS_episr.c ****     *
 445:Generated_Source\PSoC5/USBFS_episr.c ****     *******************************************************************************/
 446:Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_EP_6_ISR)
 447:Generated_Source\PSoC5/USBFS_episr.c ****     {
 448:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_6_ISR_ENTRY_CALLBACK
 449:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_6_ISR_EntryCallback();
 450:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_6_ISR_ENTRY_CALLBACK) */
 451:Generated_Source\PSoC5/USBFS_episr.c **** 
 452:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP6_USER_CODE` Place your code here */
 453:Generated_Source\PSoC5/USBFS_episr.c **** 
 454:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 455:Generated_Source\PSoC5/USBFS_episr.c **** 
 456:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 457:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 458:Generated_Source\PSoC5/USBFS_episr.c ****         {
 459:Generated_Source\PSoC5/USBFS_episr.c ****             uint8 intEn = EA;
 460:Generated_Source\PSoC5/USBFS_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 461:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 462:Generated_Source\PSoC5/USBFS_episr.c **** 
 463:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieEpInterruptSource(USBFS_SIE_INT_EP6_INTR);
 464:Generated_Source\PSoC5/USBFS_episr.c ****         
 465:Generated_Source\PSoC5/USBFS_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 466:Generated_Source\PSoC5/USBFS_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 467:Generated_Source\PSoC5/USBFS_episr.c ****         * OUT endpoint: data is ready to read from endpoint buffer. 
 468:Generated_Source\PSoC5/USBFS_episr.c ****         */
 469:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)
 470:Generated_Source\PSoC5/USBFS_episr.c ****         if (0u != (USBFS_EP[USBFS_EP6].addr & USBFS_DIR_IN))
 471:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_MANAGEMENT_DMA_AUTO) */
 472:Generated_Source\PSoC5/USBFS_episr.c ****         {
 473:Generated_Source\PSoC5/USBFS_episr.c ****             /* Read CR0 register to clear SIE lock. */
 474:Generated_Source\PSoC5/USBFS_episr.c ****             (void) USBFS_SIE_EP_BASE.sieEp[USBFS_EP6].epCr0;
 475:Generated_Source\PSoC5/USBFS_episr.c **** 
 476:Generated_Source\PSoC5/USBFS_episr.c ****             /* Toggle all endpoint types except ISOC. */
 477:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_GET_EP_TYPE(USBFS_EP6) != USBFS_EP_TYPE_ISOC)
 478:Generated_Source\PSoC5/USBFS_episr.c ****             {
 479:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_EP[USBFS_EP6].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
 480:Generated_Source\PSoC5/USBFS_episr.c ****             }
 481:Generated_Source\PSoC5/USBFS_episr.c ****             
 482:Generated_Source\PSoC5/USBFS_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 483:Generated_Source\PSoC5/USBFS_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 484:Generated_Source\PSoC5/USBFS_episr.c ****             * Because last chunk of data is being copied.
 485:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 486:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 487:Generated_Source\PSoC5/USBFS_episr.c ****             */
 488:Generated_Source\PSoC5/USBFS_episr.c ****             USBFS_EP[USBFS_EP6].apiEpState = USBFS_EVENT_PENDING;
 489:Generated_Source\PSoC5/USBFS_episr.c ****         }
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 14


 490:Generated_Source\PSoC5/USBFS_episr.c **** 
 491:Generated_Source\PSoC5/USBFS_episr.c ****     #if (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO))
 492:Generated_Source\PSoC5/USBFS_episr.c ****         #if (defined(USBFS_ENABLE_MIDI_STREAMING) && \
 493:Generated_Source\PSoC5/USBFS_episr.c ****             !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 494:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_midi_out_ep == USBFS_EP6)
 495:Generated_Source\PSoC5/USBFS_episr.c ****             {
 496:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_MIDI_OUT_Service();
 497:Generated_Source\PSoC5/USBFS_episr.c ****             }
 498:Generated_Source\PSoC5/USBFS_episr.c ****         #endif /* (USBFS_ISR_SERVICE_MIDI_OUT) */
 499:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)) */
 500:Generated_Source\PSoC5/USBFS_episr.c **** 
 501:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP6_END_USER_CODE` Place your code here */
 502:Generated_Source\PSoC5/USBFS_episr.c **** 
 503:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 504:Generated_Source\PSoC5/USBFS_episr.c **** 
 505:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_6_ISR_EXIT_CALLBACK
 506:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_6_ISR_ExitCallback();
 507:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_6_ISR_EXIT_CALLBACK) */
 508:Generated_Source\PSoC5/USBFS_episr.c **** 
 509:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 510:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 511:Generated_Source\PSoC5/USBFS_episr.c ****         
 512:Generated_Source\PSoC5/USBFS_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 513:Generated_Source\PSoC5/USBFS_episr.c ****         }
 514:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 515:Generated_Source\PSoC5/USBFS_episr.c ****     }
 516:Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_EP6_ISR_ACTIVE) */
 517:Generated_Source\PSoC5/USBFS_episr.c **** 
 518:Generated_Source\PSoC5/USBFS_episr.c **** 
 519:Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_EP7_ISR_ACTIVE)
 520:Generated_Source\PSoC5/USBFS_episr.c ****     /*******************************************************************************
 521:Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_EP_7_ISR
 522:Generated_Source\PSoC5/USBFS_episr.c ****     ****************************************************************************//**
 523:Generated_Source\PSoC5/USBFS_episr.c ****     *
 524:Generated_Source\PSoC5/USBFS_episr.c ****     *  Endpoint 7 Interrupt Service Routine.
 525:Generated_Source\PSoC5/USBFS_episr.c ****     *
 526:Generated_Source\PSoC5/USBFS_episr.c ****     *
 527:Generated_Source\PSoC5/USBFS_episr.c ****     *******************************************************************************/
 528:Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_EP_7_ISR)
 529:Generated_Source\PSoC5/USBFS_episr.c ****     {
 530:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_7_ISR_ENTRY_CALLBACK
 531:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_7_ISR_EntryCallback();
 532:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_7_ISR_ENTRY_CALLBACK) */
 533:Generated_Source\PSoC5/USBFS_episr.c **** 
 534:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP7_USER_CODE` Place your code here */
 535:Generated_Source\PSoC5/USBFS_episr.c **** 
 536:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 537:Generated_Source\PSoC5/USBFS_episr.c **** 
 538:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 539:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 540:Generated_Source\PSoC5/USBFS_episr.c ****         {
 541:Generated_Source\PSoC5/USBFS_episr.c ****             uint8 intEn = EA;
 542:Generated_Source\PSoC5/USBFS_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 543:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 544:Generated_Source\PSoC5/USBFS_episr.c ****     
 545:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieEpInterruptSource(USBFS_SIE_INT_EP7_INTR);
 546:Generated_Source\PSoC5/USBFS_episr.c ****         
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 15


 547:Generated_Source\PSoC5/USBFS_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 548:Generated_Source\PSoC5/USBFS_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 549:Generated_Source\PSoC5/USBFS_episr.c ****         * OUT endpoint: data is ready to read from endpoint buffer. 
 550:Generated_Source\PSoC5/USBFS_episr.c ****         */
 551:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)
 552:Generated_Source\PSoC5/USBFS_episr.c ****         if (0u != (USBFS_EP[USBFS_EP7].addr & USBFS_DIR_IN))
 553:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_MANAGEMENT_DMA_AUTO) */
 554:Generated_Source\PSoC5/USBFS_episr.c ****         {           
 555:Generated_Source\PSoC5/USBFS_episr.c ****             /* Read CR0 register to clear SIE lock. */
 556:Generated_Source\PSoC5/USBFS_episr.c ****             (void) USBFS_SIE_EP_BASE.sieEp[USBFS_EP7].epCr0;
 557:Generated_Source\PSoC5/USBFS_episr.c **** 
 558:Generated_Source\PSoC5/USBFS_episr.c ****             /* Toggle all endpoint types except ISOC. */
 559:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_GET_EP_TYPE(USBFS_EP7) != USBFS_EP_TYPE_ISOC)
 560:Generated_Source\PSoC5/USBFS_episr.c ****             {
 561:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_EP[USBFS_EP7].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
 562:Generated_Source\PSoC5/USBFS_episr.c ****             }
 563:Generated_Source\PSoC5/USBFS_episr.c ****             
 564:Generated_Source\PSoC5/USBFS_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 565:Generated_Source\PSoC5/USBFS_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 566:Generated_Source\PSoC5/USBFS_episr.c ****             * Because last chunk of data is being copied.
 567:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 568:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 569:Generated_Source\PSoC5/USBFS_episr.c ****             */
 570:Generated_Source\PSoC5/USBFS_episr.c ****             USBFS_EP[USBFS_EP7].apiEpState = USBFS_EVENT_PENDING;
 571:Generated_Source\PSoC5/USBFS_episr.c ****         }
 572:Generated_Source\PSoC5/USBFS_episr.c **** 
 573:Generated_Source\PSoC5/USBFS_episr.c **** 
 574:Generated_Source\PSoC5/USBFS_episr.c ****     #if (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO))
 575:Generated_Source\PSoC5/USBFS_episr.c ****         #if (defined(USBFS_ENABLE_MIDI_STREAMING) && \
 576:Generated_Source\PSoC5/USBFS_episr.c ****             !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 577:Generated_Source\PSoC5/USBFS_episr.c ****             if(USBFS_midi_out_ep == USBFS_EP7)
 578:Generated_Source\PSoC5/USBFS_episr.c ****             {
 579:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_MIDI_OUT_Service();
 580:Generated_Source\PSoC5/USBFS_episr.c ****             }
 581:Generated_Source\PSoC5/USBFS_episr.c ****         #endif /* (USBFS_ISR_SERVICE_MIDI_OUT) */
 582:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)) */
 583:Generated_Source\PSoC5/USBFS_episr.c **** 
 584:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP7_END_USER_CODE` Place your code here */
 585:Generated_Source\PSoC5/USBFS_episr.c **** 
 586:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 587:Generated_Source\PSoC5/USBFS_episr.c **** 
 588:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_7_ISR_EXIT_CALLBACK
 589:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_7_ISR_ExitCallback();
 590:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_7_ISR_EXIT_CALLBACK) */
 591:Generated_Source\PSoC5/USBFS_episr.c **** 
 592:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 593:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 594:Generated_Source\PSoC5/USBFS_episr.c ****         
 595:Generated_Source\PSoC5/USBFS_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 596:Generated_Source\PSoC5/USBFS_episr.c ****         }
 597:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 598:Generated_Source\PSoC5/USBFS_episr.c ****     }
 599:Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_EP7_ISR_ACTIVE) */
 600:Generated_Source\PSoC5/USBFS_episr.c **** 
 601:Generated_Source\PSoC5/USBFS_episr.c **** 
 602:Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_EP8_ISR_ACTIVE)
 603:Generated_Source\PSoC5/USBFS_episr.c ****     /*******************************************************************************
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 16


 604:Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_EP_8_ISR
 605:Generated_Source\PSoC5/USBFS_episr.c ****     ****************************************************************************//**
 606:Generated_Source\PSoC5/USBFS_episr.c ****     *
 607:Generated_Source\PSoC5/USBFS_episr.c ****     *  Endpoint 8 Interrupt Service Routine
 608:Generated_Source\PSoC5/USBFS_episr.c ****     *
 609:Generated_Source\PSoC5/USBFS_episr.c ****     *
 610:Generated_Source\PSoC5/USBFS_episr.c ****     *******************************************************************************/
 611:Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_EP_8_ISR)
 612:Generated_Source\PSoC5/USBFS_episr.c ****     {
 613:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_8_ISR_ENTRY_CALLBACK
 614:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_8_ISR_EntryCallback();
 615:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_8_ISR_ENTRY_CALLBACK) */
 616:Generated_Source\PSoC5/USBFS_episr.c **** 
 617:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP8_USER_CODE` Place your code here */
 618:Generated_Source\PSoC5/USBFS_episr.c **** 
 619:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 620:Generated_Source\PSoC5/USBFS_episr.c **** 
 621:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 622:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 623:Generated_Source\PSoC5/USBFS_episr.c ****         {
 624:Generated_Source\PSoC5/USBFS_episr.c ****             uint8 intEn = EA;
 625:Generated_Source\PSoC5/USBFS_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 626:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 627:Generated_Source\PSoC5/USBFS_episr.c **** 
 628:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieEpInterruptSource(USBFS_SIE_INT_EP8_INTR);
 629:Generated_Source\PSoC5/USBFS_episr.c ****         
 630:Generated_Source\PSoC5/USBFS_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 631:Generated_Source\PSoC5/USBFS_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 632:Generated_Source\PSoC5/USBFS_episr.c ****         * OUT endpoint: data is ready to read from endpoint buffer. 
 633:Generated_Source\PSoC5/USBFS_episr.c ****         */
 634:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)
 635:Generated_Source\PSoC5/USBFS_episr.c ****         if (0u != (USBFS_EP[USBFS_EP8].addr & USBFS_DIR_IN))
 636:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_MANAGEMENT_DMA_AUTO) */
 637:Generated_Source\PSoC5/USBFS_episr.c ****         {
 638:Generated_Source\PSoC5/USBFS_episr.c ****             /* Read CR0 register to clear SIE lock. */
 639:Generated_Source\PSoC5/USBFS_episr.c ****             (void) USBFS_SIE_EP_BASE.sieEp[USBFS_EP8].epCr0;
 640:Generated_Source\PSoC5/USBFS_episr.c **** 
 641:Generated_Source\PSoC5/USBFS_episr.c ****             /* Toggle all endpoint types except ISOC. */
 642:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_GET_EP_TYPE(USBFS_EP8) != USBFS_EP_TYPE_ISOC)
 643:Generated_Source\PSoC5/USBFS_episr.c ****             {
 644:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_EP[USBFS_EP8].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
 645:Generated_Source\PSoC5/USBFS_episr.c ****             }
 646:Generated_Source\PSoC5/USBFS_episr.c **** 
 647:Generated_Source\PSoC5/USBFS_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 648:Generated_Source\PSoC5/USBFS_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 649:Generated_Source\PSoC5/USBFS_episr.c ****             * Because last chunk of data is being copied.
 650:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 651:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 652:Generated_Source\PSoC5/USBFS_episr.c ****             */
 653:Generated_Source\PSoC5/USBFS_episr.c ****             USBFS_EP[USBFS_EP8].apiEpState = USBFS_EVENT_PENDING;
 654:Generated_Source\PSoC5/USBFS_episr.c ****         }
 655:Generated_Source\PSoC5/USBFS_episr.c **** 
 656:Generated_Source\PSoC5/USBFS_episr.c ****     #if (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO))
 657:Generated_Source\PSoC5/USBFS_episr.c ****         #if (defined(USBFS_ENABLE_MIDI_STREAMING) && \
 658:Generated_Source\PSoC5/USBFS_episr.c ****             !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 659:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_midi_out_ep == USBFS_EP8)
 660:Generated_Source\PSoC5/USBFS_episr.c ****             {
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 17


 661:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_MIDI_OUT_Service();
 662:Generated_Source\PSoC5/USBFS_episr.c ****             }
 663:Generated_Source\PSoC5/USBFS_episr.c ****         #endif /* (USBFS_ISR_SERVICE_MIDI_OUT) */
 664:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)) */
 665:Generated_Source\PSoC5/USBFS_episr.c **** 
 666:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP8_END_USER_CODE` Place your code here */
 667:Generated_Source\PSoC5/USBFS_episr.c **** 
 668:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 669:Generated_Source\PSoC5/USBFS_episr.c **** 
 670:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_8_ISR_EXIT_CALLBACK
 671:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_8_ISR_ExitCallback();
 672:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_8_ISR_EXIT_CALLBACK) */
 673:Generated_Source\PSoC5/USBFS_episr.c **** 
 674:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 675:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 676:Generated_Source\PSoC5/USBFS_episr.c ****         
 677:Generated_Source\PSoC5/USBFS_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 678:Generated_Source\PSoC5/USBFS_episr.c ****         }
 679:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 680:Generated_Source\PSoC5/USBFS_episr.c ****     }
 681:Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_EP8_ISR_ACTIVE) */
 682:Generated_Source\PSoC5/USBFS_episr.c **** 
 683:Generated_Source\PSoC5/USBFS_episr.c **** 
 684:Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_SOF_ISR_ACTIVE)
 685:Generated_Source\PSoC5/USBFS_episr.c ****     /*******************************************************************************
 686:Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_SOF_ISR
 687:Generated_Source\PSoC5/USBFS_episr.c ****     ****************************************************************************//**
 688:Generated_Source\PSoC5/USBFS_episr.c ****     *
 689:Generated_Source\PSoC5/USBFS_episr.c ****     *  Start of Frame Interrupt Service Routine.
 690:Generated_Source\PSoC5/USBFS_episr.c ****     *
 691:Generated_Source\PSoC5/USBFS_episr.c ****     *
 692:Generated_Source\PSoC5/USBFS_episr.c ****     *******************************************************************************/
 693:Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_SOF_ISR)
 694:Generated_Source\PSoC5/USBFS_episr.c ****     {
 253              		.loc 1 694 0
 254              		.cfi_startproc
 255              		@ args = 0, pretend = 0, frame = 0
 256              		@ frame_needed = 0, uses_anonymous_args = 0
 257              		@ link register save eliminated.
 258 0000 7047     		bx	lr
 259              		.cfi_endproc
 260              	.LFE5:
 261              		.size	USBFS_SOF_ISR, .-USBFS_SOF_ISR
 262 0002 00BF     		.section	.text.USBFS_BUS_RESET_ISR,"ax",%progbits
 263              		.align	2
 264              		.global	USBFS_BUS_RESET_ISR
 265              		.thumb
 266              		.thumb_func
 267              		.type	USBFS_BUS_RESET_ISR, %function
 268              	USBFS_BUS_RESET_ISR:
 269              	.LFB6:
 695:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_SOF_ISR_ENTRY_CALLBACK
 696:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_SOF_ISR_EntryCallback();
 697:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_SOF_ISR_ENTRY_CALLBACK) */
 698:Generated_Source\PSoC5/USBFS_episr.c **** 
 699:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START SOF_USER_CODE` Place your code here */
 700:Generated_Source\PSoC5/USBFS_episr.c **** 
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 18


 701:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 702:Generated_Source\PSoC5/USBFS_episr.c **** 
 703:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieInterruptSource(USBFS_INTR_SIE_SOF_INTR);
 704:Generated_Source\PSoC5/USBFS_episr.c **** 
 705:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_SOF_ISR_EXIT_CALLBACK
 706:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_SOF_ISR_ExitCallback();
 707:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_SOF_ISR_EXIT_CALLBACK) */
 708:Generated_Source\PSoC5/USBFS_episr.c ****     }
 709:Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_SOF_ISR_ACTIVE) */
 710:Generated_Source\PSoC5/USBFS_episr.c **** 
 711:Generated_Source\PSoC5/USBFS_episr.c **** 
 712:Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_BUS_RESET_ISR_ACTIVE)
 713:Generated_Source\PSoC5/USBFS_episr.c **** /*******************************************************************************
 714:Generated_Source\PSoC5/USBFS_episr.c **** * Function Name: USBFS_BUS_RESET_ISR
 715:Generated_Source\PSoC5/USBFS_episr.c **** ****************************************************************************//**
 716:Generated_Source\PSoC5/USBFS_episr.c **** *
 717:Generated_Source\PSoC5/USBFS_episr.c **** *  USB Bus Reset Interrupt Service Routine.  Calls _Start with the same
 718:Generated_Source\PSoC5/USBFS_episr.c **** *  parameters as the last USER call to _Start
 719:Generated_Source\PSoC5/USBFS_episr.c **** *
 720:Generated_Source\PSoC5/USBFS_episr.c **** *
 721:Generated_Source\PSoC5/USBFS_episr.c **** *******************************************************************************/
 722:Generated_Source\PSoC5/USBFS_episr.c **** CY_ISR(USBFS_BUS_RESET_ISR)
 723:Generated_Source\PSoC5/USBFS_episr.c **** {
 270              		.loc 1 723 0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 0
 273              		@ frame_needed = 0, uses_anonymous_args = 0
 274              		.loc 1 723 0
 275 0000 08B5     		push	{r3, lr}
 276              		.cfi_def_cfa_offset 8
 277              		.cfi_offset 3, -8
 278              		.cfi_offset 14, -4
 724:Generated_Source\PSoC5/USBFS_episr.c **** #ifdef USBFS_BUS_RESET_ISR_ENTRY_CALLBACK
 725:Generated_Source\PSoC5/USBFS_episr.c ****     USBFS_BUS_RESET_ISR_EntryCallback();
 726:Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_BUS_RESET_ISR_ENTRY_CALLBACK) */
 727:Generated_Source\PSoC5/USBFS_episr.c **** 
 728:Generated_Source\PSoC5/USBFS_episr.c ****     /* `#START BUS_RESET_USER_CODE` Place your code here */
 729:Generated_Source\PSoC5/USBFS_episr.c **** 
 730:Generated_Source\PSoC5/USBFS_episr.c ****     /* `#END` */
 731:Generated_Source\PSoC5/USBFS_episr.c **** 
 732:Generated_Source\PSoC5/USBFS_episr.c ****     USBFS_ClearSieInterruptSource(USBFS_INTR_SIE_BUS_RESET_INTR);
 733:Generated_Source\PSoC5/USBFS_episr.c **** 
 734:Generated_Source\PSoC5/USBFS_episr.c ****     USBFS_ReInitComponent();
 279              		.loc 1 734 0
 280 0002 FFF7FEFF 		bl	USBFS_ReInitComponent
 281              	.LVL0:
 282 0006 08BD     		pop	{r3, pc}
 283              		.cfi_endproc
 284              	.LFE6:
 285              		.size	USBFS_BUS_RESET_ISR, .-USBFS_BUS_RESET_ISR
 286              		.text
 287              	.Letext0:
 288              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 289              		.file 3 "Generated_Source\\PSoC5\\USBFS.h"
 290              		.file 4 "Generated_Source\\PSoC5\\USBFS_pvt.h"
 291              		.section	.debug_info,"",%progbits
 292              	.Ldebug_info0:
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 19


 293 0000 74020000 		.4byte	0x274
 294 0004 0400     		.2byte	0x4
 295 0006 00000000 		.4byte	.Ldebug_abbrev0
 296 000a 04       		.byte	0x4
 297 000b 01       		.uleb128 0x1
 298 000c B7000000 		.4byte	.LASF39
 299 0010 0C       		.byte	0xc
 300 0011 44000000 		.4byte	.LASF40
 301 0015 A5020000 		.4byte	.LASF41
 302 0019 00000000 		.4byte	.Ldebug_ranges0+0
 303 001d 00000000 		.4byte	0
 304 0021 00000000 		.4byte	.Ldebug_line0
 305 0025 02       		.uleb128 0x2
 306 0026 01       		.byte	0x1
 307 0027 06       		.byte	0x6
 308 0028 99020000 		.4byte	.LASF0
 309 002c 02       		.uleb128 0x2
 310 002d 01       		.byte	0x1
 311 002e 08       		.byte	0x8
 312 002f A9000000 		.4byte	.LASF1
 313 0033 02       		.uleb128 0x2
 314 0034 02       		.byte	0x2
 315 0035 05       		.byte	0x5
 316 0036 5B020000 		.4byte	.LASF2
 317 003a 02       		.uleb128 0x2
 318 003b 02       		.byte	0x2
 319 003c 07       		.byte	0x7
 320 003d 31000000 		.4byte	.LASF3
 321 0041 02       		.uleb128 0x2
 322 0042 04       		.byte	0x4
 323 0043 05       		.byte	0x5
 324 0044 75020000 		.4byte	.LASF4
 325 0048 02       		.uleb128 0x2
 326 0049 04       		.byte	0x4
 327 004a 07       		.byte	0x7
 328 004b 55010000 		.4byte	.LASF5
 329 004f 02       		.uleb128 0x2
 330 0050 08       		.byte	0x8
 331 0051 05       		.byte	0x5
 332 0052 3D020000 		.4byte	.LASF6
 333 0056 02       		.uleb128 0x2
 334 0057 08       		.byte	0x8
 335 0058 07       		.byte	0x7
 336 0059 E7010000 		.4byte	.LASF7
 337 005d 03       		.uleb128 0x3
 338 005e 04       		.byte	0x4
 339 005f 05       		.byte	0x5
 340 0060 696E7400 		.ascii	"int\000"
 341 0064 02       		.uleb128 0x2
 342 0065 04       		.byte	0x4
 343 0066 07       		.byte	0x7
 344 0067 DA010000 		.4byte	.LASF8
 345 006b 04       		.uleb128 0x4
 346 006c 65020000 		.4byte	.LASF9
 347 0070 02       		.byte	0x2
 348 0071 E401     		.2byte	0x1e4
 349 0073 2C000000 		.4byte	0x2c
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 20


 350 0077 04       		.uleb128 0x4
 351 0078 BE010000 		.4byte	.LASF10
 352 007c 02       		.byte	0x2
 353 007d E501     		.2byte	0x1e5
 354 007f 3A000000 		.4byte	0x3a
 355 0083 02       		.uleb128 0x2
 356 0084 04       		.byte	0x4
 357 0085 04       		.byte	0x4
 358 0086 1C000000 		.4byte	.LASF11
 359 008a 02       		.uleb128 0x2
 360 008b 08       		.byte	0x8
 361 008c 04       		.byte	0x4
 362 008d 98010000 		.4byte	.LASF12
 363 0091 02       		.uleb128 0x2
 364 0092 01       		.byte	0x1
 365 0093 08       		.byte	0x8
 366 0094 4B020000 		.4byte	.LASF13
 367 0098 04       		.uleb128 0x4
 368 0099 45010000 		.4byte	.LASF14
 369 009d 02       		.byte	0x2
 370 009e 8E02     		.2byte	0x28e
 371 00a0 A4000000 		.4byte	0xa4
 372 00a4 05       		.uleb128 0x5
 373 00a5 6B000000 		.4byte	0x6b
 374 00a9 02       		.uleb128 0x2
 375 00aa 08       		.byte	0x8
 376 00ab 04       		.byte	0x4
 377 00ac 8D020000 		.4byte	.LASF15
 378 00b0 02       		.uleb128 0x2
 379 00b1 04       		.byte	0x4
 380 00b2 07       		.byte	0x7
 381 00b3 26020000 		.4byte	.LASF16
 382 00b7 06       		.uleb128 0x6
 383 00b8 0C       		.byte	0xc
 384 00b9 03       		.byte	0x3
 385 00ba 95       		.byte	0x95
 386 00bb 2C010000 		.4byte	0x12c
 387 00bf 07       		.uleb128 0x7
 388 00c0 2F020000 		.4byte	.LASF17
 389 00c4 03       		.byte	0x3
 390 00c5 97       		.byte	0x97
 391 00c6 6B000000 		.4byte	0x6b
 392 00ca 00       		.byte	0
 393 00cb 07       		.uleb128 0x7
 394 00cc 4A010000 		.4byte	.LASF18
 395 00d0 03       		.byte	0x3
 396 00d1 98       		.byte	0x98
 397 00d2 6B000000 		.4byte	0x6b
 398 00d6 01       		.byte	0x1
 399 00d7 07       		.uleb128 0x7
 400 00d8 FE010000 		.4byte	.LASF19
 401 00dc 03       		.byte	0x3
 402 00dd 99       		.byte	0x99
 403 00de 6B000000 		.4byte	0x6b
 404 00e2 02       		.byte	0x2
 405 00e3 07       		.uleb128 0x7
 406 00e4 A0000000 		.4byte	.LASF20
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 21


 407 00e8 03       		.byte	0x3
 408 00e9 9A       		.byte	0x9a
 409 00ea 6B000000 		.4byte	0x6b
 410 00ee 03       		.byte	0x3
 411 00ef 07       		.uleb128 0x7
 412 00f0 67010000 		.4byte	.LASF21
 413 00f4 03       		.byte	0x3
 414 00f5 9B       		.byte	0x9b
 415 00f6 6B000000 		.4byte	0x6b
 416 00fa 04       		.byte	0x4
 417 00fb 07       		.uleb128 0x7
 418 00fc 36020000 		.4byte	.LASF22
 419 0100 03       		.byte	0x3
 420 0101 9C       		.byte	0x9c
 421 0102 6B000000 		.4byte	0x6b
 422 0106 05       		.byte	0x5
 423 0107 07       		.uleb128 0x7
 424 0108 B3010000 		.4byte	.LASF23
 425 010c 03       		.byte	0x3
 426 010d 9D       		.byte	0x9d
 427 010e 77000000 		.4byte	0x77
 428 0112 06       		.byte	0x6
 429 0113 07       		.uleb128 0x7
 430 0114 50020000 		.4byte	.LASF24
 431 0118 03       		.byte	0x3
 432 0119 9E       		.byte	0x9e
 433 011a 77000000 		.4byte	0x77
 434 011e 08       		.byte	0x8
 435 011f 07       		.uleb128 0x7
 436 0120 6B020000 		.4byte	.LASF25
 437 0124 03       		.byte	0x3
 438 0125 9F       		.byte	0x9f
 439 0126 6B000000 		.4byte	0x6b
 440 012a 0A       		.byte	0xa
 441 012b 00       		.byte	0
 442 012c 08       		.uleb128 0x8
 443 012d 69000000 		.4byte	.LASF26
 444 0131 03       		.byte	0x3
 445 0132 A0       		.byte	0xa0
 446 0133 B7000000 		.4byte	0xb7
 447 0137 06       		.uleb128 0x6
 448 0138 10       		.byte	0x10
 449 0139 03       		.byte	0x3
 450 013a DC       		.byte	0xdc
 451 013b 70010000 		.4byte	0x170
 452 013f 07       		.uleb128 0x7
 453 0140 92000000 		.4byte	.LASF27
 454 0144 03       		.byte	0x3
 455 0145 DE       		.byte	0xde
 456 0146 6B000000 		.4byte	0x6b
 457 014a 00       		.byte	0
 458 014b 07       		.uleb128 0x7
 459 014c 99000000 		.4byte	.LASF28
 460 0150 03       		.byte	0x3
 461 0151 DF       		.byte	0xdf
 462 0152 6B000000 		.4byte	0x6b
 463 0156 01       		.byte	0x1
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 22


 464 0157 07       		.uleb128 0x7
 465 0158 16000000 		.4byte	.LASF29
 466 015c 03       		.byte	0x3
 467 015d E0       		.byte	0xe0
 468 015e 6B000000 		.4byte	0x6b
 469 0162 02       		.byte	0x2
 470 0163 09       		.uleb128 0x9
 471 0164 67617000 		.ascii	"gap\000"
 472 0168 03       		.byte	0x3
 473 0169 E1       		.byte	0xe1
 474 016a 70010000 		.4byte	0x170
 475 016e 03       		.byte	0x3
 476 016f 00       		.byte	0
 477 0170 0A       		.uleb128 0xa
 478 0171 6B000000 		.4byte	0x6b
 479 0175 80010000 		.4byte	0x180
 480 0179 0B       		.uleb128 0xb
 481 017a B0000000 		.4byte	0xb0
 482 017e 0C       		.byte	0xc
 483 017f 00       		.byte	0
 484 0180 08       		.uleb128 0x8
 485 0181 9F010000 		.4byte	.LASF30
 486 0185 03       		.byte	0x3
 487 0186 E2       		.byte	0xe2
 488 0187 37010000 		.4byte	0x137
 489 018b 0C       		.uleb128 0xc
 490 018c 90       		.byte	0x90
 491 018d 03       		.byte	0x3
 492 018e 1601     		.2byte	0x116
 493 0190 A2010000 		.4byte	0x1a2
 494 0194 0D       		.uleb128 0xd
 495 0195 89010000 		.4byte	.LASF31
 496 0199 03       		.byte	0x3
 497 019a 1801     		.2byte	0x118
 498 019c A2010000 		.4byte	0x1a2
 499 01a0 00       		.byte	0
 500 01a1 00       		.byte	0
 501 01a2 0A       		.uleb128 0xa
 502 01a3 80010000 		.4byte	0x180
 503 01a7 B2010000 		.4byte	0x1b2
 504 01ab 0B       		.uleb128 0xb
 505 01ac B0000000 		.4byte	0xb0
 506 01b0 08       		.byte	0x8
 507 01b1 00       		.byte	0
 508 01b2 04       		.uleb128 0x4
 509 01b3 C5010000 		.4byte	.LASF32
 510 01b7 03       		.byte	0x3
 511 01b8 1901     		.2byte	0x119
 512 01ba 8B010000 		.4byte	0x18b
 513 01be 0E       		.uleb128 0xe
 514 01bf 17020000 		.4byte	.LASF33
 515 01c3 01       		.byte	0x1
 516 01c4 25       		.byte	0x25
 517 01c5 00000000 		.4byte	.LFB0
 518 01c9 30000000 		.4byte	.LFE0-.LFB0
 519 01cd 01       		.uleb128 0x1
 520 01ce 9C       		.byte	0x9c
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 23


 521 01cf 0E       		.uleb128 0xe
 522 01d0 7E020000 		.4byte	.LASF34
 523 01d4 01       		.byte	0x1
 524 01d5 78       		.byte	0x78
 525 01d6 00000000 		.4byte	.LFB1
 526 01da 34000000 		.4byte	.LFE1-.LFB1
 527 01de 01       		.uleb128 0x1
 528 01df 9C       		.byte	0x9c
 529 01e0 0E       		.uleb128 0xe
 530 01e1 22000000 		.4byte	.LASF35
 531 01e5 01       		.byte	0x1
 532 01e6 C9       		.byte	0xc9
 533 01e7 00000000 		.4byte	.LFB2
 534 01eb 3C000000 		.4byte	.LFE2-.LFB2
 535 01ef 01       		.uleb128 0x1
 536 01f0 9C       		.byte	0x9c
 537 01f1 0F       		.uleb128 0xf
 538 01f2 6C010000 		.4byte	.LASF36
 539 01f6 01       		.byte	0x1
 540 01f7 1A01     		.2byte	0x11a
 541 01f9 00000000 		.4byte	.LFB3
 542 01fd 3C000000 		.4byte	.LFE3-.LFB3
 543 0201 01       		.uleb128 0x1
 544 0202 9C       		.byte	0x9c
 545 0203 0F       		.uleb128 0xf
 546 0204 08020000 		.4byte	.LASF37
 547 0208 01       		.byte	0x1
 548 0209 6C01     		.2byte	0x16c
 549 020b 00000000 		.4byte	.LFB4
 550 020f 3C000000 		.4byte	.LFE4-.LFB4
 551 0213 01       		.uleb128 0x1
 552 0214 9C       		.byte	0x9c
 553 0215 0F       		.uleb128 0xf
 554 0216 7B010000 		.4byte	.LASF38
 555 021a 01       		.byte	0x1
 556 021b B502     		.2byte	0x2b5
 557 021d 00000000 		.4byte	.LFB5
 558 0221 02000000 		.4byte	.LFE5-.LFB5
 559 0225 01       		.uleb128 0x1
 560 0226 9C       		.byte	0x9c
 561 0227 10       		.uleb128 0x10
 562 0228 7E000000 		.4byte	.LASF42
 563 022c 01       		.byte	0x1
 564 022d D202     		.2byte	0x2d2
 565 022f 00000000 		.4byte	.LFB6
 566 0233 08000000 		.4byte	.LFE6-.LFB6
 567 0237 01       		.uleb128 0x1
 568 0238 9C       		.byte	0x9c
 569 0239 47020000 		.4byte	0x247
 570 023d 11       		.uleb128 0x11
 571 023e 06000000 		.4byte	.LVL0
 572 0242 6C020000 		.4byte	0x26c
 573 0246 00       		.byte	0
 574 0247 0A       		.uleb128 0xa
 575 0248 57020000 		.4byte	0x257
 576 024c 57020000 		.4byte	0x257
 577 0250 0B       		.uleb128 0xb
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 24


 578 0251 B0000000 		.4byte	0xb0
 579 0255 08       		.byte	0x8
 580 0256 00       		.byte	0
 581 0257 05       		.uleb128 0x5
 582 0258 2C010000 		.4byte	0x12c
 583 025c 12       		.uleb128 0x12
 584 025d 8F010000 		.4byte	.LASF43
 585 0261 04       		.byte	0x4
 586 0262 84       		.byte	0x84
 587 0263 67020000 		.4byte	0x267
 588 0267 05       		.uleb128 0x5
 589 0268 47020000 		.4byte	0x247
 590 026c 13       		.uleb128 0x13
 591 026d 00000000 		.4byte	.LASF44
 592 0271 00000000 		.4byte	.LASF44
 593 0275 04       		.byte	0x4
 594 0276 AF       		.byte	0xaf
 595 0277 00       		.byte	0
 596              		.section	.debug_abbrev,"",%progbits
 597              	.Ldebug_abbrev0:
 598 0000 01       		.uleb128 0x1
 599 0001 11       		.uleb128 0x11
 600 0002 01       		.byte	0x1
 601 0003 25       		.uleb128 0x25
 602 0004 0E       		.uleb128 0xe
 603 0005 13       		.uleb128 0x13
 604 0006 0B       		.uleb128 0xb
 605 0007 03       		.uleb128 0x3
 606 0008 0E       		.uleb128 0xe
 607 0009 1B       		.uleb128 0x1b
 608 000a 0E       		.uleb128 0xe
 609 000b 55       		.uleb128 0x55
 610 000c 17       		.uleb128 0x17
 611 000d 11       		.uleb128 0x11
 612 000e 01       		.uleb128 0x1
 613 000f 10       		.uleb128 0x10
 614 0010 17       		.uleb128 0x17
 615 0011 00       		.byte	0
 616 0012 00       		.byte	0
 617 0013 02       		.uleb128 0x2
 618 0014 24       		.uleb128 0x24
 619 0015 00       		.byte	0
 620 0016 0B       		.uleb128 0xb
 621 0017 0B       		.uleb128 0xb
 622 0018 3E       		.uleb128 0x3e
 623 0019 0B       		.uleb128 0xb
 624 001a 03       		.uleb128 0x3
 625 001b 0E       		.uleb128 0xe
 626 001c 00       		.byte	0
 627 001d 00       		.byte	0
 628 001e 03       		.uleb128 0x3
 629 001f 24       		.uleb128 0x24
 630 0020 00       		.byte	0
 631 0021 0B       		.uleb128 0xb
 632 0022 0B       		.uleb128 0xb
 633 0023 3E       		.uleb128 0x3e
 634 0024 0B       		.uleb128 0xb
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 25


 635 0025 03       		.uleb128 0x3
 636 0026 08       		.uleb128 0x8
 637 0027 00       		.byte	0
 638 0028 00       		.byte	0
 639 0029 04       		.uleb128 0x4
 640 002a 16       		.uleb128 0x16
 641 002b 00       		.byte	0
 642 002c 03       		.uleb128 0x3
 643 002d 0E       		.uleb128 0xe
 644 002e 3A       		.uleb128 0x3a
 645 002f 0B       		.uleb128 0xb
 646 0030 3B       		.uleb128 0x3b
 647 0031 05       		.uleb128 0x5
 648 0032 49       		.uleb128 0x49
 649 0033 13       		.uleb128 0x13
 650 0034 00       		.byte	0
 651 0035 00       		.byte	0
 652 0036 05       		.uleb128 0x5
 653 0037 35       		.uleb128 0x35
 654 0038 00       		.byte	0
 655 0039 49       		.uleb128 0x49
 656 003a 13       		.uleb128 0x13
 657 003b 00       		.byte	0
 658 003c 00       		.byte	0
 659 003d 06       		.uleb128 0x6
 660 003e 13       		.uleb128 0x13
 661 003f 01       		.byte	0x1
 662 0040 0B       		.uleb128 0xb
 663 0041 0B       		.uleb128 0xb
 664 0042 3A       		.uleb128 0x3a
 665 0043 0B       		.uleb128 0xb
 666 0044 3B       		.uleb128 0x3b
 667 0045 0B       		.uleb128 0xb
 668 0046 01       		.uleb128 0x1
 669 0047 13       		.uleb128 0x13
 670 0048 00       		.byte	0
 671 0049 00       		.byte	0
 672 004a 07       		.uleb128 0x7
 673 004b 0D       		.uleb128 0xd
 674 004c 00       		.byte	0
 675 004d 03       		.uleb128 0x3
 676 004e 0E       		.uleb128 0xe
 677 004f 3A       		.uleb128 0x3a
 678 0050 0B       		.uleb128 0xb
 679 0051 3B       		.uleb128 0x3b
 680 0052 0B       		.uleb128 0xb
 681 0053 49       		.uleb128 0x49
 682 0054 13       		.uleb128 0x13
 683 0055 38       		.uleb128 0x38
 684 0056 0B       		.uleb128 0xb
 685 0057 00       		.byte	0
 686 0058 00       		.byte	0
 687 0059 08       		.uleb128 0x8
 688 005a 16       		.uleb128 0x16
 689 005b 00       		.byte	0
 690 005c 03       		.uleb128 0x3
 691 005d 0E       		.uleb128 0xe
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 26


 692 005e 3A       		.uleb128 0x3a
 693 005f 0B       		.uleb128 0xb
 694 0060 3B       		.uleb128 0x3b
 695 0061 0B       		.uleb128 0xb
 696 0062 49       		.uleb128 0x49
 697 0063 13       		.uleb128 0x13
 698 0064 00       		.byte	0
 699 0065 00       		.byte	0
 700 0066 09       		.uleb128 0x9
 701 0067 0D       		.uleb128 0xd
 702 0068 00       		.byte	0
 703 0069 03       		.uleb128 0x3
 704 006a 08       		.uleb128 0x8
 705 006b 3A       		.uleb128 0x3a
 706 006c 0B       		.uleb128 0xb
 707 006d 3B       		.uleb128 0x3b
 708 006e 0B       		.uleb128 0xb
 709 006f 49       		.uleb128 0x49
 710 0070 13       		.uleb128 0x13
 711 0071 38       		.uleb128 0x38
 712 0072 0B       		.uleb128 0xb
 713 0073 00       		.byte	0
 714 0074 00       		.byte	0
 715 0075 0A       		.uleb128 0xa
 716 0076 01       		.uleb128 0x1
 717 0077 01       		.byte	0x1
 718 0078 49       		.uleb128 0x49
 719 0079 13       		.uleb128 0x13
 720 007a 01       		.uleb128 0x1
 721 007b 13       		.uleb128 0x13
 722 007c 00       		.byte	0
 723 007d 00       		.byte	0
 724 007e 0B       		.uleb128 0xb
 725 007f 21       		.uleb128 0x21
 726 0080 00       		.byte	0
 727 0081 49       		.uleb128 0x49
 728 0082 13       		.uleb128 0x13
 729 0083 2F       		.uleb128 0x2f
 730 0084 0B       		.uleb128 0xb
 731 0085 00       		.byte	0
 732 0086 00       		.byte	0
 733 0087 0C       		.uleb128 0xc
 734 0088 13       		.uleb128 0x13
 735 0089 01       		.byte	0x1
 736 008a 0B       		.uleb128 0xb
 737 008b 0B       		.uleb128 0xb
 738 008c 3A       		.uleb128 0x3a
 739 008d 0B       		.uleb128 0xb
 740 008e 3B       		.uleb128 0x3b
 741 008f 05       		.uleb128 0x5
 742 0090 01       		.uleb128 0x1
 743 0091 13       		.uleb128 0x13
 744 0092 00       		.byte	0
 745 0093 00       		.byte	0
 746 0094 0D       		.uleb128 0xd
 747 0095 0D       		.uleb128 0xd
 748 0096 00       		.byte	0
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 27


 749 0097 03       		.uleb128 0x3
 750 0098 0E       		.uleb128 0xe
 751 0099 3A       		.uleb128 0x3a
 752 009a 0B       		.uleb128 0xb
 753 009b 3B       		.uleb128 0x3b
 754 009c 05       		.uleb128 0x5
 755 009d 49       		.uleb128 0x49
 756 009e 13       		.uleb128 0x13
 757 009f 38       		.uleb128 0x38
 758 00a0 0B       		.uleb128 0xb
 759 00a1 00       		.byte	0
 760 00a2 00       		.byte	0
 761 00a3 0E       		.uleb128 0xe
 762 00a4 2E       		.uleb128 0x2e
 763 00a5 00       		.byte	0
 764 00a6 3F       		.uleb128 0x3f
 765 00a7 19       		.uleb128 0x19
 766 00a8 03       		.uleb128 0x3
 767 00a9 0E       		.uleb128 0xe
 768 00aa 3A       		.uleb128 0x3a
 769 00ab 0B       		.uleb128 0xb
 770 00ac 3B       		.uleb128 0x3b
 771 00ad 0B       		.uleb128 0xb
 772 00ae 27       		.uleb128 0x27
 773 00af 19       		.uleb128 0x19
 774 00b0 11       		.uleb128 0x11
 775 00b1 01       		.uleb128 0x1
 776 00b2 12       		.uleb128 0x12
 777 00b3 06       		.uleb128 0x6
 778 00b4 40       		.uleb128 0x40
 779 00b5 18       		.uleb128 0x18
 780 00b6 9742     		.uleb128 0x2117
 781 00b8 19       		.uleb128 0x19
 782 00b9 00       		.byte	0
 783 00ba 00       		.byte	0
 784 00bb 0F       		.uleb128 0xf
 785 00bc 2E       		.uleb128 0x2e
 786 00bd 00       		.byte	0
 787 00be 3F       		.uleb128 0x3f
 788 00bf 19       		.uleb128 0x19
 789 00c0 03       		.uleb128 0x3
 790 00c1 0E       		.uleb128 0xe
 791 00c2 3A       		.uleb128 0x3a
 792 00c3 0B       		.uleb128 0xb
 793 00c4 3B       		.uleb128 0x3b
 794 00c5 05       		.uleb128 0x5
 795 00c6 27       		.uleb128 0x27
 796 00c7 19       		.uleb128 0x19
 797 00c8 11       		.uleb128 0x11
 798 00c9 01       		.uleb128 0x1
 799 00ca 12       		.uleb128 0x12
 800 00cb 06       		.uleb128 0x6
 801 00cc 40       		.uleb128 0x40
 802 00cd 18       		.uleb128 0x18
 803 00ce 9742     		.uleb128 0x2117
 804 00d0 19       		.uleb128 0x19
 805 00d1 00       		.byte	0
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 28


 806 00d2 00       		.byte	0
 807 00d3 10       		.uleb128 0x10
 808 00d4 2E       		.uleb128 0x2e
 809 00d5 01       		.byte	0x1
 810 00d6 3F       		.uleb128 0x3f
 811 00d7 19       		.uleb128 0x19
 812 00d8 03       		.uleb128 0x3
 813 00d9 0E       		.uleb128 0xe
 814 00da 3A       		.uleb128 0x3a
 815 00db 0B       		.uleb128 0xb
 816 00dc 3B       		.uleb128 0x3b
 817 00dd 05       		.uleb128 0x5
 818 00de 27       		.uleb128 0x27
 819 00df 19       		.uleb128 0x19
 820 00e0 11       		.uleb128 0x11
 821 00e1 01       		.uleb128 0x1
 822 00e2 12       		.uleb128 0x12
 823 00e3 06       		.uleb128 0x6
 824 00e4 40       		.uleb128 0x40
 825 00e5 18       		.uleb128 0x18
 826 00e6 9742     		.uleb128 0x2117
 827 00e8 19       		.uleb128 0x19
 828 00e9 01       		.uleb128 0x1
 829 00ea 13       		.uleb128 0x13
 830 00eb 00       		.byte	0
 831 00ec 00       		.byte	0
 832 00ed 11       		.uleb128 0x11
 833 00ee 898201   		.uleb128 0x4109
 834 00f1 00       		.byte	0
 835 00f2 11       		.uleb128 0x11
 836 00f3 01       		.uleb128 0x1
 837 00f4 31       		.uleb128 0x31
 838 00f5 13       		.uleb128 0x13
 839 00f6 00       		.byte	0
 840 00f7 00       		.byte	0
 841 00f8 12       		.uleb128 0x12
 842 00f9 34       		.uleb128 0x34
 843 00fa 00       		.byte	0
 844 00fb 03       		.uleb128 0x3
 845 00fc 0E       		.uleb128 0xe
 846 00fd 3A       		.uleb128 0x3a
 847 00fe 0B       		.uleb128 0xb
 848 00ff 3B       		.uleb128 0x3b
 849 0100 0B       		.uleb128 0xb
 850 0101 49       		.uleb128 0x49
 851 0102 13       		.uleb128 0x13
 852 0103 3F       		.uleb128 0x3f
 853 0104 19       		.uleb128 0x19
 854 0105 3C       		.uleb128 0x3c
 855 0106 19       		.uleb128 0x19
 856 0107 00       		.byte	0
 857 0108 00       		.byte	0
 858 0109 13       		.uleb128 0x13
 859 010a 2E       		.uleb128 0x2e
 860 010b 00       		.byte	0
 861 010c 3F       		.uleb128 0x3f
 862 010d 19       		.uleb128 0x19
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 29


 863 010e 3C       		.uleb128 0x3c
 864 010f 19       		.uleb128 0x19
 865 0110 6E       		.uleb128 0x6e
 866 0111 0E       		.uleb128 0xe
 867 0112 03       		.uleb128 0x3
 868 0113 0E       		.uleb128 0xe
 869 0114 3A       		.uleb128 0x3a
 870 0115 0B       		.uleb128 0xb
 871 0116 3B       		.uleb128 0x3b
 872 0117 0B       		.uleb128 0xb
 873 0118 00       		.byte	0
 874 0119 00       		.byte	0
 875 011a 00       		.byte	0
 876              		.section	.debug_aranges,"",%progbits
 877 0000 4C000000 		.4byte	0x4c
 878 0004 0200     		.2byte	0x2
 879 0006 00000000 		.4byte	.Ldebug_info0
 880 000a 04       		.byte	0x4
 881 000b 00       		.byte	0
 882 000c 0000     		.2byte	0
 883 000e 0000     		.2byte	0
 884 0010 00000000 		.4byte	.LFB0
 885 0014 30000000 		.4byte	.LFE0-.LFB0
 886 0018 00000000 		.4byte	.LFB1
 887 001c 34000000 		.4byte	.LFE1-.LFB1
 888 0020 00000000 		.4byte	.LFB2
 889 0024 3C000000 		.4byte	.LFE2-.LFB2
 890 0028 00000000 		.4byte	.LFB3
 891 002c 3C000000 		.4byte	.LFE3-.LFB3
 892 0030 00000000 		.4byte	.LFB4
 893 0034 3C000000 		.4byte	.LFE4-.LFB4
 894 0038 00000000 		.4byte	.LFB5
 895 003c 02000000 		.4byte	.LFE5-.LFB5
 896 0040 00000000 		.4byte	.LFB6
 897 0044 08000000 		.4byte	.LFE6-.LFB6
 898 0048 00000000 		.4byte	0
 899 004c 00000000 		.4byte	0
 900              		.section	.debug_ranges,"",%progbits
 901              	.Ldebug_ranges0:
 902 0000 00000000 		.4byte	.LFB0
 903 0004 30000000 		.4byte	.LFE0
 904 0008 00000000 		.4byte	.LFB1
 905 000c 34000000 		.4byte	.LFE1
 906 0010 00000000 		.4byte	.LFB2
 907 0014 3C000000 		.4byte	.LFE2
 908 0018 00000000 		.4byte	.LFB3
 909 001c 3C000000 		.4byte	.LFE3
 910 0020 00000000 		.4byte	.LFB4
 911 0024 3C000000 		.4byte	.LFE4
 912 0028 00000000 		.4byte	.LFB5
 913 002c 02000000 		.4byte	.LFE5
 914 0030 00000000 		.4byte	.LFB6
 915 0034 08000000 		.4byte	.LFE6
 916 0038 00000000 		.4byte	0
 917 003c 00000000 		.4byte	0
 918              		.section	.debug_line,"",%progbits
 919              	.Ldebug_line0:
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 30


 920 0000 12010000 		.section	.debug_str,"MS",%progbits,1
 920      02006200 
 920      00000201 
 920      FB0E0D00 
 920      01010101 
 921              	.LASF44:
 922 0000 55534246 		.ascii	"USBFS_ReInitComponent\000"
 922      535F5265 
 922      496E6974 
 922      436F6D70 
 922      6F6E656E 
 923              	.LASF29:
 924 0016 65704372 		.ascii	"epCr0\000"
 924      3000
 925              	.LASF11:
 926 001c 666C6F61 		.ascii	"float\000"
 926      7400
 927              	.LASF35:
 928 0022 55534246 		.ascii	"USBFS_EP_3_ISR\000"
 928      535F4550 
 928      5F335F49 
 928      535200
 929              	.LASF3:
 930 0031 73686F72 		.ascii	"short unsigned int\000"
 930      7420756E 
 930      7369676E 
 930      65642069 
 930      6E7400
 931              	.LASF40:
 932 0044 47656E65 		.ascii	"Generated_Source\\PSoC5\\USBFS_episr.c\000"
 932      72617465 
 932      645F536F 
 932      75726365 
 932      5C50536F 
 933              	.LASF26:
 934 0069 545F5553 		.ascii	"T_USBFS_EP_CTL_BLOCK\000"
 934      4246535F 
 934      45505F43 
 934      544C5F42 
 934      4C4F434B 
 935              	.LASF42:
 936 007e 55534246 		.ascii	"USBFS_BUS_RESET_ISR\000"
 936      535F4255 
 936      535F5245 
 936      5345545F 
 936      49535200 
 937              	.LASF27:
 938 0092 6570436E 		.ascii	"epCnt0\000"
 938      743000
 939              	.LASF28:
 940 0099 6570436E 		.ascii	"epCnt1\000"
 940      743100
 941              	.LASF20:
 942 00a0 6570546F 		.ascii	"epToggle\000"
 942      67676C65 
 942      00
 943              	.LASF1:
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 31


 944 00a9 756E7369 		.ascii	"unsigned char\000"
 944      676E6564 
 944      20636861 
 944      7200
 945              	.LASF39:
 946 00b7 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 946      43313120 
 946      352E342E 
 946      31203230 
 946      31363036 
 947 00ea 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 947      20726576 
 947      6973696F 
 947      6E203233 
 947      37373135 
 948 011d 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 948      66756E63 
 948      74696F6E 
 948      2D736563 
 948      74696F6E 
 949              	.LASF14:
 950 0145 72656738 		.ascii	"reg8\000"
 950      00
 951              	.LASF18:
 952 014a 61706945 		.ascii	"apiEpState\000"
 952      70537461 
 952      746500
 953              	.LASF5:
 954 0155 6C6F6E67 		.ascii	"long unsigned int\000"
 954      20756E73 
 954      69676E65 
 954      6420696E 
 954      7400
 955              	.LASF21:
 956 0167 61646472 		.ascii	"addr\000"
 956      00
 957              	.LASF36:
 958 016c 55534246 		.ascii	"USBFS_EP_4_ISR\000"
 958      535F4550 
 958      5F345F49 
 958      535200
 959              	.LASF38:
 960 017b 55534246 		.ascii	"USBFS_SOF_ISR\000"
 960      535F534F 
 960      465F4953 
 960      5200
 961              	.LASF31:
 962 0189 73696545 		.ascii	"sieEp\000"
 962      7000
 963              	.LASF43:
 964 018f 55534246 		.ascii	"USBFS_EP\000"
 964      535F4550 
 964      00
 965              	.LASF12:
 966 0198 646F7562 		.ascii	"double\000"
 966      6C6500
 967              	.LASF30:
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 32


 968 019f 55534246 		.ascii	"USBFS_sie_ep_struct\000"
 968      535F7369 
 968      655F6570 
 968      5F737472 
 968      75637400 
 969              	.LASF23:
 970 01b3 62756666 		.ascii	"buffOffset\000"
 970      4F666673 
 970      657400
 971              	.LASF10:
 972 01be 75696E74 		.ascii	"uint16\000"
 972      313600
 973              	.LASF32:
 974 01c5 55534246 		.ascii	"USBFS_sie_eps_struct\000"
 974      535F7369 
 974      655F6570 
 974      735F7374 
 974      72756374 
 975              	.LASF8:
 976 01da 756E7369 		.ascii	"unsigned int\000"
 976      676E6564 
 976      20696E74 
 976      00
 977              	.LASF7:
 978 01e7 6C6F6E67 		.ascii	"long long unsigned int\000"
 978      206C6F6E 
 978      6720756E 
 978      7369676E 
 978      65642069 
 979              	.LASF19:
 980 01fe 68774570 		.ascii	"hwEpState\000"
 980      53746174 
 980      6500
 981              	.LASF37:
 982 0208 55534246 		.ascii	"USBFS_EP_5_ISR\000"
 982      535F4550 
 982      5F355F49 
 982      535200
 983              	.LASF33:
 984 0217 55534246 		.ascii	"USBFS_EP_1_ISR\000"
 984      535F4550 
 984      5F315F49 
 984      535200
 985              	.LASF16:
 986 0226 73697A65 		.ascii	"sizetype\000"
 986      74797065 
 986      00
 987              	.LASF17:
 988 022f 61747472 		.ascii	"attrib\000"
 988      696200
 989              	.LASF22:
 990 0236 65704D6F 		.ascii	"epMode\000"
 990      646500
 991              	.LASF6:
 992 023d 6C6F6E67 		.ascii	"long long int\000"
 992      206C6F6E 
 992      6720696E 
ARM GAS  C:\Users\bkettle\AppData\Local\Temp\ccRsqaVk.s 			page 33


 992      7400
 993              	.LASF13:
 994 024b 63686172 		.ascii	"char\000"
 994      00
 995              	.LASF24:
 996 0250 62756666 		.ascii	"bufferSize\000"
 996      65725369 
 996      7A6500
 997              	.LASF2:
 998 025b 73686F72 		.ascii	"short int\000"
 998      7420696E 
 998      7400
 999              	.LASF9:
 1000 0265 75696E74 		.ascii	"uint8\000"
 1000      3800
 1001              	.LASF25:
 1002 026b 696E7465 		.ascii	"interface\000"
 1002      72666163 
 1002      6500
 1003              	.LASF4:
 1004 0275 6C6F6E67 		.ascii	"long int\000"
 1004      20696E74 
 1004      00
 1005              	.LASF34:
 1006 027e 55534246 		.ascii	"USBFS_EP_2_ISR\000"
 1006      535F4550 
 1006      5F325F49 
 1006      535200
 1007              	.LASF15:
 1008 028d 6C6F6E67 		.ascii	"long double\000"
 1008      20646F75 
 1008      626C6500 
 1009              	.LASF0:
 1010 0299 7369676E 		.ascii	"signed char\000"
 1010      65642063 
 1010      68617200 
 1011              	.LASF41:
 1012 02a5 433A5C55 		.ascii	"C:\\Users\\bkettle\\OneDrive\\School\\6.115\\projec"
 1012      73657273 
 1012      5C626B65 
 1012      74746C65 
 1012      5C4F6E65 
 1013 02d2 745C7073 		.ascii	"t\\psoc\\Password Keeper\\Complete.cydsn\000"
 1013      6F635C50 
 1013      61737377 
 1013      6F726420 
 1013      4B656570 
 1014              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
